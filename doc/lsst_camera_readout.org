#+STARTUP: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [10pt, t]
#+BEAMER_FRAME_LEVEL: 1
#+TITLE: LSST Camera Electronics Readout
#+AUTHOR: Jim Chiang
#+DATE: 2016-08-17
#+COLUMNS: %45ITEM %10BEAMER_env(Env) %8BEAMER_envargs(Env Args) %4BEAMER_col(Col) %8BEAMER_extra(Extra)
#+PROPERTY: BEAMER_col_ALL 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 :ETC
#+OPTIONS: toc:nil
#+LaTeX_HEADER: \usepackage{ragged2e}
#+LaTeX_HEADER: \newcommand{\code}[1]{{\tt{#1}}}
#+LaTeX_HEADER: \newcommand{\mybold}[1]{{\textbf{#1}}}
#+LaTeX_HEADER: \newcommand{\obslsstSim}{\code{obs\_lsstSim}}
#+LaTeX_HEADER: \hypersetup{colorlinks=true, urlcolor=blue}

* Outline
  - Desired Functionality
  - Properties of Science Sensor Candidates
  - PhoSim's segmentation.txt and \obslsstSim
  - Implementation

* Desired Functionality
  - Accept inputs from GalSim or PhoSim "eimages".
  - Write as FITS files that look like what the real data will.
  - Add electronics-related effects:
    - read noise (for PhoSim eimages)
    - bias
    - dark-current
    - defects (bright/dark pixels, traps)
    - CTE
    - system gain
    - crosstalk
  - Do not include sensor physics effects, e.g., brighter-fatter,
    tree-rings, edge roll-off, QE.

* Science Sensors Properties
#+LATEX: \centering
#+ATTR_LATEX: height=2in
[[./DetectorPlaneLayout_single_sensor_annotated.png]]
#+LATEX: \vfil
  - Pixel geometries differ for e2v (left) and ITL (right) devices:
    - Imaging regions: $512 \times 2002$ (e2v) versus
        $509 \times 2000$ (ITL).
    - e2v devices have 10 pixels of prescan; ITL devices have 3 pixels.
      Prescan only makes sense for the serial direction.
    - Numbers of overscan pixels in the serial and parallel directions
      are configurable, but generally should be as large as possible
      while still satisfying the 2-second readout time constraint.
  - Serial readout is in the x-direction in sensor coordinates (ignore
    the "Camera Coordinate System").

* Science Sensors Properties (cont.)
  - The pixel origin (1,1) is at the LLC in Segment 10 in both sensors.
  - Sky images will be flipped in the sensor x-direction relative to the
    above diagram.
  - For individual segments, the pixels are written in readout order:
#+LATEX: \centering
#+ATTR_LATEX: height=3in
[[./ITL_segs_10_00_cropped.png]]
#+LATEX: \vfil
#+LATEX: \justifying
  - This implies different flips in the x-direction for e2v vs ITL sensors.
    See my [[https://confluence.slac.stanford.edu/x/DrLOCw][2015-11-19 presentation to the SSim group]]

* PhoSim's segmentation.txt and \obslsstSim
  - Most (all?) of the electronics readout properties are summarized
    in PhoSim's [[https://bitbucket.org/phosim/phosim_release/src/39f267c3f9733a490de85231cd7ac6c5e7154ebc/data/lsst/segmentation.txt?at=master&fileviewer=file-view-default][segmentation.txt]] file.  Unfortunately, recent versions
    contain severe flaws:
    - Interprets sensor y-direction as serial direction; x-direction
      as parallel.
    - Includes a "parallel prescan".
    - Has zero overscan in (true) serial direction.
  - \code{lsst.afw.cameraGeom} encapsulates some of the amplifier
    pixel geometry, but the data read in by the code in
    \code{obs\_lsstSim} [[https://github.com/lsst/obs_lsstSim/tree/master/description/camera][master]] is inconsistent with the
    segmentation.txt file on which it is based.
    - Work is apparently underway to fix this, [[https://jira.lsstcorp.org/browse/DM-6349][DM-6349]].
    - \code{obs\_lsstSim} has to be synced with PhoSim ([[https://jira.lsstcorp.org/browse/DM-7181][DM-7181]]).
  - Getting pixel geometry info from \code{cameraGeom} and the rest of
    the readout info from segmentation.txt is problematic, even if the
    synchronization between these two sources is fixed (and automatic).

*Conclusion:* We will only use a (corrected) version of the
segmentation.txt file as the source of information for the electronics
readout properties.  If there is ever some single entity in the LSST
Stack (e.g., in \code{cameraGeom}) that provides all of the needed
information, then we will use that.

* Implementation
  - Make this a standalone package in the DESC software space, i.e.,
    not part of GalSim or the Stack.  Currently, the code lives in
    https://github.com/jchiang87/lsst_camera_readout
  - The code will read the electronics readout info from a segmentation.txt
    file.
  - The code will accept a sensor image with the proper geometry ($4072
    \times 4000$ pixels for an ITL device, $4096 \times 4004$ pixels
    for an e2v device) and generate 16 FITS files with primary HDUs that
    match the imaging HDUs currently written by CCS for the single
    sensor data.
  - The input image data can have three possible formats:
    - PhoSim eimage FITS file
    - GalSim.Image[DFIS]
    - lsst.afw.Image[DFIU]
  - The pixel values in the input image should be e-/pixel.

* To Do:
  - Create segmentation.txt (and focalplane.txt) files that have correct
    sensor geometries, and ensure that PhoSim can run using these files.
  - Make sure the Stack (i.e., \obslsstSim) can read in and process
    the corrected per amplifier FITS files.
